<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (C) 2013 tarent AG
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining
  ~ a copy of this software and associated documentation files (the
  ~ "Software"), to deal in the Software without restriction, including
  ~ without limitation the rights to use, copy, modify, merge, publish,
  ~ distribute, sublicense, and/or sell copies of the Software, and to
  ~ permit persons to whom the Software is furnished to do so, subject to
  ~ the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be
  ~ included in all copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  ~ EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  ~ MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  ~ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  ~ CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  ~ TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  ~ SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  -->

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

    <!-- OAuth2 Access Token interface this is used by clients to request an access token for a certain resource -->
    <http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security">

        <!-- the client needs to authenticate itself -->
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>
        <anonymous enabled="false"/>

        <!-- use http basic with this entry point authentication method to authenticate the client -->
        <http-basic entry-point-ref="clientAuthenticationEntryPoint"/>

        <!-- include this only if you need to authenticate clients via request parameters -->
        <custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER"/>

        <!-- uses general oauthAccessDeniedHandler -->
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
    </http>

    <http pattern="/fb/oauth/access_token" create-session="stateless"
          authentication-manager-ref="clientAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security">

        <!-- the client needs to authenticate itself -->
        <intercept-url pattern="/fb/oauth/access_token" access="IS_AUTHENTICATED_FULLY"/>
        <anonymous enabled="false"/>

        <!-- use http basic with this entry point authentication method to authenticate the client -->
        <http-basic entry-point-ref="clientAuthenticationEntryPoint"/>

        <!-- include this only if you need to authenticate clients via request parameters -->
        <custom-filter ref="fbClientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER"/>

        <!-- uses general oauthAccessDeniedHandler -->
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
    </http>

    <bean id="fbClientCredentialsTokenEndpointFilter"
          class="org.osiam.security.helper.FBClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="clientAuthenticationManager"/>
    </bean>

    <bean id="clientCredentialsTokenEndpointFilter"
          class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="clientAuthenticationManager"/>
    </bean>

    <!-- client authentication manager -->
    <authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="clientDetailsUserService"/>
    </authentication-manager>

    <!-- service holding client data -->
    <bean id="clientDetailsUserService"
          class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="osiamClientDetailsService"/>
    </bean>

    <!-- the OAuth2 authentication entry point -->
    <bean id="clientAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="authorization-server/client"/>
    </bean>

    <!-- login action listener -->
    <!--bean id="loginActionListener"
          class="org.osiam.auth.login.listener.AuthenticationListener">
	</bean-->
</beans>
